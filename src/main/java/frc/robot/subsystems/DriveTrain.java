// RobotBuilder Version: 3.1
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package frc.robot.subsystems;

import frc.robot.commands.*;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj2.command.SubsystemBase;

import com.revrobotics.CANSparkMax;
import com.revrobotics.CANSparkMaxLowLevel.MotorType;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.PWMSparkMax;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.SpeedControllerGroup;
import edu.wpi.first.wpilibj.drive.DifferentialDrive;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class DriveTrain extends SubsystemBase {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS
    
    private static DriveTrain m_driveTrain = null;

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
private CANSparkMax left1;
private CANSparkMax left2;
private SpeedControllerGroup leftMotor;
private CANSparkMax right1;
private CANSparkMax right2;
private SpeedControllerGroup rightMotor;
private DifferentialDrive drive;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    /**
    *
    */
    private DriveTrain() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
left1 = new CANSparkMax(1, MotorType.kBrushless);
 left1.setInverted(true);

left2 = new CANSparkMax(2, MotorType.kBrushless);
 left2.setInverted(true);

leftMotor = new SpeedControllerGroup(left1, left2);
 addChild("Left Motor",leftMotor);
 

right1 = new CANSparkMax(3, MotorType.kBrushless);
 right1.setInverted(true);

right2 = new CANSparkMax(6, MotorType.kBrushless);
 right2.setInverted(true);

rightMotor = new SpeedControllerGroup(right1, right2  );
 addChild("Right Motor",rightMotor);
 
drive = new DifferentialDrive(leftMotor, rightMotor);
 addChild("Drive",drive);
 drive.setSafetyEnabled(true);
drive.setExpiration(0.1);
drive.setMaxOutput(1.0);



    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    synchronized public static DriveTrain getInstance() {
        if (m_driveTrain == null) {
            m_driveTrain = new DriveTrain();
        }
        return m_driveTrain;
    }

    @Override
    public void periodic() {
        // This method will be called once per scheduler run

    }

    @Override
    public void simulationPeriodic() {
        // This method will be called once per scheduler run when in simulation

    }

    

    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    
    public void drive(double left, double right) {
        drive.tankDrive(left, right);
    }
}

